# -*- coding: utf-8 -*-
"""Transformation_activity.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16Nch55wDK21-aB0laF5f-18CdQlskULs
"""

#Mount to drive
import pandas as pd
from google.colab import drive
drive.mount('/content/drive')

data = pd.read_csv("/content/drive/MyDrive/bc_trip259172515_230215.csv")
data

# Display the first few rows of the DataFrame
print("First few rows of the DataFrame:")
print(data.head())

# Display information about the DataFrame including the data types of each column
print("\nDataFrame information:")
data.info()

# Display summary statistics for the DataFrame
print("\nSummary statistics:")
print(data.describe())

# Use DataFrame.drop() to remove the EVENT_NO_STOP, GPS_SATELLITES, and GPS_HDOP columns
columns_to_drop = ['EVENT_NO_STOP', 'GPS_SATELLITES', 'GPS_HDOP']
data_filtered = data.drop(columns=columns_to_drop)

# Display the first few rows of the filtered DataFrame
print("\nFirst few rows of the DataFrame after dropping EVENT_NO_STOP, GPS_SATELLITES, and GPS_HDOP columns:")
print(data_filtered.head())

# Display information about the filtered DataFrame
print("\nFiltered DataFrame information:")
data_filtered.info()

data_path = "/content/drive/MyDrive/bc_trip259172515_230215.csv"

columns_to_include = ['EVENT_NO_TRIP', 'OPD_DATE', 'VEHICLE_ID', 'METERS', 'ACT_TIME', 'GPS_LONGITUDE', 'GPS_LATITUDE']

# Read the CSV file and include only the specified columns
df = pd.read_csv(data_path, usecols=columns_to_include)

# Display the first few rows of the filtered DataFrame
print("First few rows of the filtered DataFrame:")
print(df.head())

# Display information about the DataFrame, including data types and memory usage
print("\nDataFrame information:")
df.info()

from datetime import datetime, timedelta
def create_timestamp(row):
    date = datetime.strptime(row['OPD_DATE'], '%d%b%Y:%H:%M:%S')
    # Convert ACT_TIME to a timedelta object (from seconds since midnight)
    time_offset = timedelta(seconds=row['ACT_TIME'])
    timestamp = date + time_offset
    return timestamp

# Apply the function to each row and create the TIMESTAMP column
df['TIMESTAMP'] = df.apply(create_timestamp, axis=1)

# Display the first few rows of the DataFrame with the new TIMESTAMP column
print("First few rows of the DataFrame with the new TIMESTAMP column:")
print(df.head())

# Display DataFrame information to confirm the new column and data types
print("\nDataFrame information:")
df.info()

# Remove the OPD_DATE and ACT_TIME columns
df = df.drop(columns=['OPD_DATE', 'ACT_TIME'])

# Display the first few rows of the DataFrame with the new TIMESTAMP column
print("First few rows of the DataFrame with the new TIMESTAMP column and without OPD_DATE and ACT_TIME columns:")
print(df.head())

# Display DataFrame information to confirm the new column and data types
print("\nDataFrame information:")
df.info()

# Calculate the difference between rows for METERS and TIMESTAMP
df['dMETERS'] = df['METERS'].diff()
df['dTIMESTAMP'] = df['TIMESTAMP'].diff().dt.total_seconds()  # Convert timedelta to seconds

# Calculate SPEED as dMETERS / dTIMESTAMP
df['SPEED'] = df['dMETERS'] / df['dTIMESTAMP']

# Drop the unneeded dMETERS and dTIMESTAMP columns
df.drop(columns=['dMETERS', 'dTIMESTAMP'], inplace=True)

# Display the first few rows of the DataFrame with the SPEED column
print("First few rows of the DataFrame with the SPEED column:")
print(df.head())

df['SPEED'] = df['SPEED'].fillna(method='bfill')

print(df.head())

# Calculate and display the summary statistics for the SPEED column
summary_statistics = df['SPEED'].describe()
# Displaying the statistics
print("Summary statistics for SPEED:")
print(summary_statistics)
# Extracting the minimum, maximum, and average speed
min_speed = summary_statistics['min']
max_speed = summary_statistics['max']
average_speed = summary_statistics['mean']
# Display the minimum, maximum, and average speed
print("\nMinimum speed: {:.2f} m/s".format(min_speed))
print("Maximum speed: {:.2f} m/s".format(max_speed))
print("Average speed: {:.2f} m/s".format(average_speed))

data = pd.read_csv("/content/drive/MyDrive/bc_veh4223_230215.csv")
data

# Decode the timestamp by combining OPD_DATE and ACT_TIME
data['TIMESTAMP'] = data.apply(lambda row: pd.to_datetime(row['OPD_DATE'], format='%d%b%Y:%H:%M:%S') + pd.to_timedelta(row['ACT_TIME'], unit='s'), axis=1)

data.drop(columns=['OPD_DATE', 'ACT_TIME', 'GPS_SATELLITES', 'GPS_HDOP'], inplace=True)

data['dMETERS'] = data['METERS'].diff()
data['dTIMESTAMP'] = data['TIMESTAMP'].diff().dt.total_seconds()  # Convert timedelta to seconds

data['SPEED'] = data['dMETERS'] / data['dTIMESTAMP']

data.drop(columns=['dMETERS', 'dTIMESTAMP'], inplace=True)

max_speed = data['SPEED'].max()
median_speed = data['SPEED'].median()

max_speed_row = data[data['SPEED'] == max_speed].iloc[0]

print(f"Maximum speed for vehicle #4223 on February 15, 2023: {max_speed:.2f} m/s")
print(f"Where and when did this maximum speed occur:")
print(f"  GPS Longitude: {max_speed_row['GPS_LONGITUDE']}")
print(f"  GPS Latitude: {max_speed_row['GPS_LATITUDE']}")
print(f"  Timestamp: {max_speed_row['TIMESTAMP']}")
print(f"\nMedian speed for this vehicle on this day: {median_speed:.2f} m/s")